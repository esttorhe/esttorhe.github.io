<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tips on The mind of Esteban</title>
    <link>https://estebantorr.es/tags/tips/</link>
    <description>Recent content in tips on The mind of Esteban</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Jan 2016 16:11:38 +0000</lastBuildDate><atom:link href="https://estebantorr.es/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Small Tip for Debugging Autolayout issues</title>
      <link>https://estebantorr.es/blog/2016/01/2016-01-13-small-tip-for-debugging-autolayout-issues/</link>
      <pubDate>Wed, 13 Jan 2016 16:11:38 +0000</pubDate>
      
      <guid>https://estebantorr.es/blog/2016/01/2016-01-13-small-tip-for-debugging-autolayout-issues/</guid>
      <description>This is quite a small post and probably not worth writing it but I know that this will come in handy in the future and will totally forget about it.
The other day I was trying to figure out an Autolayout crash on the app I was working on and trying to make head of tails from the console log with stuff like this:
&amp;lt;NSAutoresizingMaskLayoutConstraint:0x175086220 h=-&amp;amp;- v=-&amp;amp;- UIView:0x147533250.height == UIView:0x14760b4a0.height&amp;gt; Imagine that but with many interacting UIViews at play; most of the time you can actually figure what&amp;rsquo;s going on based on the constant value or if you are well versed you can see the Matrix from source code a la Neo; but let&amp;rsquo;s be honest; more times than none you are left wondering which view is whichâ€¦</description>
    </item>
    
    <item>
      <title>Semver intermediate versioning</title>
      <link>https://estebantorr.es/blog/2015/08/2015-08-11-semver-intermediate-versioning/</link>
      <pubDate>Tue, 11 Aug 2015 14:07:36 +0000</pubDate>
      
      <guid>https://estebantorr.es/blog/2015/08/2015-08-11-semver-intermediate-versioning/</guid>
      <description>&lt;p&gt;Lately I&amp;rsquo;ve come across multiple tweets and talks about people avoiding jumping over the dreaded &lt;code&gt;1.0.0&lt;/code&gt; of their &lt;code&gt;frameworks&lt;/code&gt;, tools, etc.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If semver defined some simple criteria for what constitutes a 1.x release would that help alleviate the fear?&lt;/p&gt;&amp;mdash; Colin Eberhardt ðŸ‡ºðŸ‡¦ (@ColinEberhardt) &lt;a href=&#34;https://twitter.com/ColinEberhardt/status/631152832490643457?ref_src=twsrc%5Etfw&#34;&gt;August 11, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Why do so many open source projects fear making a 1.x releases? My projects depend on numerous 0.x versions - should that worry me!&lt;/p&gt;&amp;mdash; Colin Eberhardt ðŸ‡ºðŸ‡¦ (@ColinEberhardt) &lt;a href=&#34;https://twitter.com/ColinEberhardt/status/631152342826663936?ref_src=twsrc%5Etfw&#34;&gt;August 11, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;p&gt;Sadly that&amp;rsquo;s the current state of Â«our worldÂ» as developers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift 2.0 - throws tip</title>
      <link>https://estebantorr.es/blog/2015/06/2015-06-14-swift-2-dot-0-throws-tip/</link>
      <pubDate>Sun, 14 Jun 2015 17:39:51 +0000</pubDate>
      
      <guid>https://estebantorr.es/blog/2015/06/2015-06-14-swift-2-dot-0-throws-tip/</guid>
      <description>Quick Swift 2.0 throws tip: There&amp;rsquo;s been a lot of Â«heatedÂ» debates regarding the throws approach added to Swift 2.0 in favor of Either&amp;lt;T,U&amp;gt;.
 Some examples:
@cocoaphony Throws types were explicitly but hand-wavily pooh-poohed in the What&#39;s New in Swift talk :/   Swift exceptions compose poorly. You canâ€™t determine concrete ErrorType from a closure that throws, and canâ€™t throw/catch asynchronously.
&amp;mdash; Justin Spahr-Summers (@jspahrsummers) June 9, 2015   That being said, I&amp;rsquo;m not going to convince you to use it or avoid it.</description>
    </item>
    
  </channel>
</rss>
