webpackJsonp([7890091610436],{543:function(e,t){e.exports={data:{site:{siteMetadata:{githubRepo:"https://github.com/esttorhe/esttorhe.github.io",author:"Esteban Torres"}},markdownRemark:{frontmatter:{title:"Hidden error variable on exhaustive block",issueNumber:35,categories:["bug","swift"],tags:["swift2","swift","radar","bug"],author:"Esteban Torres",date:"2015-06-15 22:15:03 -0600"},html:'<p>On my <a href="http://www.estebantorr.es/blog/2015/06/14/swift-2-dot-0-throws-tip/">previous post</a> I tried to help «solve» in a way the problem with non-typed <code>throws</code> by documenting them on the internal docs as lists with <code>markdown</code>.</p>\n<p>Based on that you can rightfully assume that I\'m migrating all my <code>Result&#x3C;T,U></code> code to support <code>throws</code> instead, on my <code>2.0</code> branches.</p>\n<p>As you might know (or not) whenever you do a <code>do</code>/<code>catch</code> block the <code>catch</code> block needs to be exhaustive; just like a <code>switch</code> and «catch» <em>all</em> possible paths.</p>\n<p>It doesn\'t mean you <strong>necessarily</strong> need to specify every single error type in your <code>catch</code> block (even though ideally you should react differently for each type of error) but you can add an exhaustive <code>catch</code> that will represent «every single error».</p>\n<!--more-->\n<h1 id="the-problem"><a href="#the-problem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Problem</h1>\n<p>Apparently <code>Swift</code> internally «reserves» the <code>error</code> variable on the exhaustive <code>catch</code> block without documenting it anywhere on the book.</p>\n<p>To provide context copy and paste the following code in an empty <code>Playground</code> on <code>Xcode 7</code> and see how the compiler complains with the message:</p>\n<blockquote>\n<p>Cannot assign to \'let\' value \'error\'</p>\n</blockquote>\n<pre><code class="language-swift">enum TestError: ErrorType {\n  case HiddenErrorVariable\n}\n\nfunc throwingFunction() throws -> () {\n  throw TestError.HiddenErrorVariable\n}\n\nlet error: TestError\ndo {\n  try throwingFunction()\n} catch {\n  error = TestError.HiddenErrorVariable\n\n  print(error)\n}\n\nprint(error)\n</code></pre>\n<hr>\n<p>Keep in mind that this is an oversimplified and reduced code to demonstrate the issue; I\'m well aware that without that compile complain it will still complain about using <code>error</code> without being initialized.</p>\n<hr>\n<h1 id="what-now"><a href="#what-now" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What now?</h1>\n<p>For now the workaround is simple; avoid using a <code>let error</code> near an exhaustive <code>catch</code> block. Although that\'s not quite a solution but a patch; with some luck <code>Apple</code> will eventually fix this issue; <code>Swift 2.0</code> its still a ß and can contain a fix for this (or at least document it somewhere other than this blog post) by the time it hits production.</p>\n<p>In the meantime I filed a radar <a href="http://openradar.appspot.com/21396321"><code>rdar://21396321</code></a> explaining the issue and also asked <a href="https://twitter.com/jckarter">Joe Groff</a> (he works on <code>Swift</code> compiler at <code>Apple</code>) about this and will update when (if) he answers:</p>\n<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/jckarter">@jckarter</a> is the `error` reservation on exhaustive `catch` documented anywhere - <a href="http://t.co/qgGm1tlX4i">http://t.co/qgGm1tlX4i</a> ? Or a bug?</p>&mdash; ᴡᴀᴛᴄʜ Torres (@esttorhe) <a href="https://twitter.com/esttorhe/status/610667900421152768">June 16, 2015</a></blockquote>\n<script async src="http://platform.twitter.com/widgets.js" charset="utf-8"></script>\n<h2 id="update"><a href="#update" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Update</h2>\n<p>Well; <a href="https://twitter.com/jckarter">Joe</a> answered quicker than expected:</p>\n<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/esttorhe">@esttorhe</a> It intentionally implicitly binds an &quot;error&quot; variable if you specified none.</p>&mdash; Joe Groff (@jckarter) <a href="https://twitter.com/jckarter/status/610668658105413633">June 16, 2015</a></blockquote>\n<script async src="http://platform.twitter.com/widgets.js" charset="utf-8"></script>\n<p>Apparently it is intentional (which is good) but is not documented anywhere.</p>\n<p>I suggested adding it to the book/docs and he agreed; perhaps we will see a fix for it before it hits production.</p>',url:"hidden-error-variable-on-exhaustive-block"}},pathContext:{id:"/home/travis/build/esttorhe/esttorhe.github.io/content/_posts/2015-06-15-hidden-error-variable-on-exhaustive-block.markdown absPath of file >>> MarkdownRemark"}}}});
//# sourceMappingURL=path---hidden-error-variable-on-exhaustive-block-fc5b95e54eb844928ea6.js.map