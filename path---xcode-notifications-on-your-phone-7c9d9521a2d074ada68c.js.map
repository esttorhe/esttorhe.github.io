{"version":3,"sources":["webpack:///path---xcode-notifications-on-your-phone-7c9d9521a2d074ada68c.js","webpack:///./.cache/json/xcode-notifications-on-your-phone.json"],"names":["webpackJsonp","611","module","exports","data","site","siteMetadata","githubRepo","author","markdownRemark","frontmatter","title","issueNumber","categories","tags","date","html","url","pathContext","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,WAAA,iDAAAC,OAAA,mBAAyFC,gBAAmBC,aAAeC,MAAA,iCAAAC,YAAA,GAAAC,YAAA,wBAAAC,MAAA,gCAAAN,OAAA,KAAAO,KAAA,4BAAwLC,KAAA,uwSAAkySC,IAAA,sCAAgMC,aAAgBC,GAAA","file":"path---xcode-notifications-on-your-phone-7c9d9521a2d074ada68c.js","sourcesContent":["webpackJsonp([97900978411550],{\n\n/***/ 611:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"githubRepo\":\"https://github.com/esttorhe/esttorhe.github.io\",\"author\":\"Esteban Torres\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"Xcode notifications on your üì±\",\"issueNumber\":31,\"categories\":[\"productivity\",\"tools\"],\"tags\":[\"xcode\",\"notifications\",\"ntfy\"],\"author\":null,\"date\":\"2018-02-13T18:18:04.000Z\"},\"html\":\"<p>Since quite some time now I've been working on <code>Xcode</code> projects that are pretty big; big enough to take up a considerable amount of time to finish compiling, even worst if you are running the tests and it needs to build EVERYTHING and then run ALL the tests.</p>\\n<p>I also like to multi-task and do some other stuff while I'm compiling‚Ä¶</p>\\n<!-- [![xkcd comic about compilation times](https://imgs.xkcd.com/comics/compiling.png)](https://xkcd.com/303/) -->\\n<p><img src=\\\"https://imgs.xkcd.com/comics/compiling.png\\\" alt=\\\"xkcd comic about compilation times\\\"></p>\\n<!--more-->\\n<p>For the longest time I thought about creating some sort of service that would let me hook up some push notifications whenever <code>Xcode</code> finished doing <em>X</em> or <em>Y</em> task but never came around actually creating it. Time passed and I basically forgot all about this dream of mine.</p>\\n<p>That is until today when I found out about <a href=\\\"https://github.com/dschep/ntfy\\\"><code>ntfy</code></a>‚Ä¶</p>\\n<h1 id=\\\"ntfy\\\"><a href=\\\"#ntfy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ntfy</h1>\\n<blockquote>\\n<p><code>ntfy</code> brings notification to your shell. It can automatically provide desktop notifications when long running commands finish or it can send push notifications to your phone when a specific command finishes.</p>\\n</blockquote>\\n<p><strong>TL,DR</strong>: <code>ntfy</code> is a <code>python</code> üêç  tool that sends notifications to different configurable backend services.</p>\\n<p><strong>TL;DR 2</strong>: <code>ntfy</code> is basically the service I wanted to build and never came around to actually making.</p>\\n<h2 id=\\\"installation\\\"><a href=\\\"#installation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installation</h2>\\n<p>The tool's <code>README</code> is pretty nicely done and comes with a <code>Quickstart</code> section that describes how to install it; unfortunately for me it didn't work due to some obscure error:</p>\\n<pre><code class=\\\"language-console\\\">Command \\\"python setup.py egg_info\\\" failed with error code 1\\n</code></pre>\\n<p>Which was easily sortable by running <code>pip3</code> instead of <code>pip</code> when installing; effectively making it:</p>\\n<pre><code class=\\\"language-console\\\">sudo pip3 install ntfy\\n</code></pre>\\n<h1 id=\\\"hooking-it-into-xcode\\\"><a href=\\\"#hooking-it-into-xcode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooking it into <code>Xcode</code></h1>\\n<p>Now that the tool was installed on my machine it was just a matter of hooking it into <code>Xcode</code> behaviors (<em>Xcode -> Preferences -> Behaviors</em>)</p>\\n<p><img src=\\\"/2018-02-13-Xcode-notifications-on-your-phone/Xcode_Behaviors.png\\\" alt=\\\"Xcode Preferences showing the Behaviors tab\\\"></p>\\n<p>At the very bottom of the window there's a <code>Run</code> checkbox where you can choose a script/binary that you want to run whenever a behavior happens.</p>\\n<p>At first I had 1 script per behavior but then I discovered that there's an env variable that gets passed that has all the information I needed.</p>\\n<h2 id=\\\"available-variables\\\"><a href=\\\"#available-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Available variables</h2>\\n<p>There are many variables that get passed to the binary/script; here's a redacted list of them from my own tests:</p>\\n<pre><code>Apple_PubSub_Socket_Render=&#x3C;REDACTED>\\nCA_DEBUG_TRANSACTIONS=1\\nHOME=&#x3C;REDACTED>\\nIDEAlertMessage=Build Succeeded\\nLOGNAME=&#x3C;REDACTED>\\nMallocNanoZone=0\\nPATH=/Applications/Xcode-9.2.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\\nPWD=&#x3C;REDACTED>\\nSECURITYSESSIONID=&#x3C;REDACTED>\\nSHELL=/usr/local/bin/zsh\\nSHLVL=1\\nSSH_AUTH_SOCK=&#x3C;REDACTED>\\nTMPDIR=/var/folders/g1/&#x3C;REDACTED>/T/\\nUSER=estebantorres\\nXPC_FLAGS=0x0\\nXPC_SERVICE_NAME=0\\nXcodeDeveloperApplicationsDirectory=/Applications/Xcode-9.2.app/Contents/Developer/Applications\\nXcodeDeveloperDirectory=/Applications/Xcode-9.2.app/Contents/Developer\\nXcodeDeveloperPlatformsDirectory=/Applications/Xcode-9.2.app/Contents/Developer/Platforms\\nXcodeWorkspace=&#x3C;REDACTED>.xcworkspace\\nXcodeWorkspacePath=/Users/estebantorres/&#x3C;REDACTED>.xcworkspace\\n_=/usr/bin/env\\n__CF_USER_TEXT_ENCODING=0x1F6:0x0:0x0\\n</code></pre>\\n<p>Whenever a behavior gets executed (depending on which one) the script or binary you want to execute gets feed a set of environment variables; one of them being <code>IDEAlertMessage</code> which basically contains the message that <code>Xcode</code> displays (I also believe is the message that gets passed to the notification that <code>macOS</code> renders whenever <code>Xcode</code> starts, ends, fails to build or run tests; etc.)</p>\\n<p>As you can see the see <code>IDEAlertMessage</code> has everything I needed; is just a matter of calling <code>ntfy</code> with the contents of that variable and the <code>Xcode Workspace</code> and then you are set.</p>\\n<h2 id=\\\"script\\\"><a href=\\\"#script\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Script</h2>\\n<p>If you don't want to play around this is the contents of my script:</p>\\n<p><code>ntfy.sh</code></p>\\n<pre><code class=\\\"language-bash\\\">#! /bin/sh\\n\\n/usr/local/bin/ntfy -b telegram send \\\"$XcodeWorkspace $IDEAlertMessage\\\"\\n</code></pre>\\n<p><em>You might have noticed the <code>-b telegram</code> part. This you can check how to configure on <a href=\\\"https://github.com/dschep/ntfy\\\"><code>ntfy</code></a>'s <code>README</code>; if you don't want to use <code>Telegram</code> you can tweak it to use any of the other supported services.</em></p>\\n<h1 id=\\\"result\\\"><a href=\\\"#result\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Result</h1>\\n<p><img src=\\\"/2018-02-13-Xcode-notifications-on-your-phone/notification.png\\\" alt=\\\"macOS notification sent from Xcode using ntfy\\\"></p>\\n<p>There are lots of room for improvement here, but this basically satisfy my needs; I can start building and or running my tests; leave to the cafeteria to grab a coffee and know wether or not the build passed or not without having to wait.</p>\\n<h2 id=\\\"why-this\\\"><a href=\\\"#why-this\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why this?</h2>\\n<p>You might not find this all that useful; and perhaps I won't either, but only time will tell.\\nFor now I'm quite happy with the results and pretend to take as much advantage as I can.</p>\",\"url\":\"Xcode-notifications-on-your-phone\"}},\"pathContext\":{\"id\":\"/home/travis/build/esttorhe/esttorhe.github.io/content/_posts/2018-02-13-Xcode-notifications-on-your-phone/2018-02-13-Xcode-notifications-on-your-phone.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---xcode-notifications-on-your-phone-7c9d9521a2d074ada68c.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"githubRepo\":\"https://github.com/esttorhe/esttorhe.github.io\",\"author\":\"Esteban Torres\"}},\"markdownRemark\":{\"frontmatter\":{\"title\":\"Xcode notifications on your üì±\",\"issueNumber\":31,\"categories\":[\"productivity\",\"tools\"],\"tags\":[\"xcode\",\"notifications\",\"ntfy\"],\"author\":null,\"date\":\"2018-02-13T18:18:04.000Z\"},\"html\":\"<p>Since quite some time now I've been working on <code>Xcode</code> projects that are pretty big; big enough to take up a considerable amount of time to finish compiling, even worst if you are running the tests and it needs to build EVERYTHING and then run ALL the tests.</p>\\n<p>I also like to multi-task and do some other stuff while I'm compiling‚Ä¶</p>\\n<!-- [![xkcd comic about compilation times](https://imgs.xkcd.com/comics/compiling.png)](https://xkcd.com/303/) -->\\n<p><img src=\\\"https://imgs.xkcd.com/comics/compiling.png\\\" alt=\\\"xkcd comic about compilation times\\\"></p>\\n<!--more-->\\n<p>For the longest time I thought about creating some sort of service that would let me hook up some push notifications whenever <code>Xcode</code> finished doing <em>X</em> or <em>Y</em> task but never came around actually creating it. Time passed and I basically forgot all about this dream of mine.</p>\\n<p>That is until today when I found out about <a href=\\\"https://github.com/dschep/ntfy\\\"><code>ntfy</code></a>‚Ä¶</p>\\n<h1 id=\\\"ntfy\\\"><a href=\\\"#ntfy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ntfy</h1>\\n<blockquote>\\n<p><code>ntfy</code> brings notification to your shell. It can automatically provide desktop notifications when long running commands finish or it can send push notifications to your phone when a specific command finishes.</p>\\n</blockquote>\\n<p><strong>TL,DR</strong>: <code>ntfy</code> is a <code>python</code> üêç  tool that sends notifications to different configurable backend services.</p>\\n<p><strong>TL;DR 2</strong>: <code>ntfy</code> is basically the service I wanted to build and never came around to actually making.</p>\\n<h2 id=\\\"installation\\\"><a href=\\\"#installation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Installation</h2>\\n<p>The tool's <code>README</code> is pretty nicely done and comes with a <code>Quickstart</code> section that describes how to install it; unfortunately for me it didn't work due to some obscure error:</p>\\n<pre><code class=\\\"language-console\\\">Command \\\"python setup.py egg_info\\\" failed with error code 1\\n</code></pre>\\n<p>Which was easily sortable by running <code>pip3</code> instead of <code>pip</code> when installing; effectively making it:</p>\\n<pre><code class=\\\"language-console\\\">sudo pip3 install ntfy\\n</code></pre>\\n<h1 id=\\\"hooking-it-into-xcode\\\"><a href=\\\"#hooking-it-into-xcode\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Hooking it into <code>Xcode</code></h1>\\n<p>Now that the tool was installed on my machine it was just a matter of hooking it into <code>Xcode</code> behaviors (<em>Xcode -> Preferences -> Behaviors</em>)</p>\\n<p><img src=\\\"/2018-02-13-Xcode-notifications-on-your-phone/Xcode_Behaviors.png\\\" alt=\\\"Xcode Preferences showing the Behaviors tab\\\"></p>\\n<p>At the very bottom of the window there's a <code>Run</code> checkbox where you can choose a script/binary that you want to run whenever a behavior happens.</p>\\n<p>At first I had 1 script per behavior but then I discovered that there's an env variable that gets passed that has all the information I needed.</p>\\n<h2 id=\\\"available-variables\\\"><a href=\\\"#available-variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Available variables</h2>\\n<p>There are many variables that get passed to the binary/script; here's a redacted list of them from my own tests:</p>\\n<pre><code>Apple_PubSub_Socket_Render=&#x3C;REDACTED>\\nCA_DEBUG_TRANSACTIONS=1\\nHOME=&#x3C;REDACTED>\\nIDEAlertMessage=Build Succeeded\\nLOGNAME=&#x3C;REDACTED>\\nMallocNanoZone=0\\nPATH=/Applications/Xcode-9.2.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\\nPWD=&#x3C;REDACTED>\\nSECURITYSESSIONID=&#x3C;REDACTED>\\nSHELL=/usr/local/bin/zsh\\nSHLVL=1\\nSSH_AUTH_SOCK=&#x3C;REDACTED>\\nTMPDIR=/var/folders/g1/&#x3C;REDACTED>/T/\\nUSER=estebantorres\\nXPC_FLAGS=0x0\\nXPC_SERVICE_NAME=0\\nXcodeDeveloperApplicationsDirectory=/Applications/Xcode-9.2.app/Contents/Developer/Applications\\nXcodeDeveloperDirectory=/Applications/Xcode-9.2.app/Contents/Developer\\nXcodeDeveloperPlatformsDirectory=/Applications/Xcode-9.2.app/Contents/Developer/Platforms\\nXcodeWorkspace=&#x3C;REDACTED>.xcworkspace\\nXcodeWorkspacePath=/Users/estebantorres/&#x3C;REDACTED>.xcworkspace\\n_=/usr/bin/env\\n__CF_USER_TEXT_ENCODING=0x1F6:0x0:0x0\\n</code></pre>\\n<p>Whenever a behavior gets executed (depending on which one) the script or binary you want to execute gets feed a set of environment variables; one of them being <code>IDEAlertMessage</code> which basically contains the message that <code>Xcode</code> displays (I also believe is the message that gets passed to the notification that <code>macOS</code> renders whenever <code>Xcode</code> starts, ends, fails to build or run tests; etc.)</p>\\n<p>As you can see the see <code>IDEAlertMessage</code> has everything I needed; is just a matter of calling <code>ntfy</code> with the contents of that variable and the <code>Xcode Workspace</code> and then you are set.</p>\\n<h2 id=\\\"script\\\"><a href=\\\"#script\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Script</h2>\\n<p>If you don't want to play around this is the contents of my script:</p>\\n<p><code>ntfy.sh</code></p>\\n<pre><code class=\\\"language-bash\\\">#! /bin/sh\\n\\n/usr/local/bin/ntfy -b telegram send \\\"$XcodeWorkspace $IDEAlertMessage\\\"\\n</code></pre>\\n<p><em>You might have noticed the <code>-b telegram</code> part. This you can check how to configure on <a href=\\\"https://github.com/dschep/ntfy\\\"><code>ntfy</code></a>'s <code>README</code>; if you don't want to use <code>Telegram</code> you can tweak it to use any of the other supported services.</em></p>\\n<h1 id=\\\"result\\\"><a href=\\\"#result\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Result</h1>\\n<p><img src=\\\"/2018-02-13-Xcode-notifications-on-your-phone/notification.png\\\" alt=\\\"macOS notification sent from Xcode using ntfy\\\"></p>\\n<p>There are lots of room for improvement here, but this basically satisfy my needs; I can start building and or running my tests; leave to the cafeteria to grab a coffee and know wether or not the build passed or not without having to wait.</p>\\n<h2 id=\\\"why-this\\\"><a href=\\\"#why-this\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Why this?</h2>\\n<p>You might not find this all that useful; and perhaps I won't either, but only time will tell.\\nFor now I'm quite happy with the results and pretend to take as much advantage as I can.</p>\",\"url\":\"Xcode-notifications-on-your-phone\"}},\"pathContext\":{\"id\":\"/home/travis/build/esttorhe/esttorhe.github.io/content/_posts/2018-02-13-Xcode-notifications-on-your-phone/2018-02-13-Xcode-notifications-on-your-phone.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/xcode-notifications-on-your-phone.json\n// module id = 611\n// module chunks = 97900978411550"],"sourceRoot":""}